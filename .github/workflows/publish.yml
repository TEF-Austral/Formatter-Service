# .github/workflows/publish.yml
name: Build and Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Grant execute permission
        run: chmod +x ./gradlew

      # ========== VERSIONING ==========
      - name: Determine version bump
        id: version
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"!"* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == feat:* ]] || [[ "$COMMIT_MSG" == feature:* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == fix:* ]] || [[ "$COMMIT_MSG" == bugfix:* ]] || [[ "$COMMIT_MSG" == patch:* ]]; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      - name: Update version
        id: update_version
        run: |
          CURRENT_VERSION=$(grep "^version=" gradle.properties | cut -d'=' -f2)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          if [[ "${{ steps.version.outputs.bump }}" == "major" ]]; then
            MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
          elif [[ "${{ steps.version.outputs.bump }}" == "minor" ]]; then
            MINOR=$((MINOR + 1)); PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          sed -i "s/version=.*/version=${NEW_VERSION}/" gradle.properties
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and tag
        run: |
          git add gradle.properties
          git commit -m "chore: bump version to ${{ steps.update_version.outputs.new_version }} [skip ci]"
          git push
          git tag "v${{ steps.update_version.outputs.new_version }}"
          git push origin "v${{ steps.update_version.outputs.new_version }}"

      # ========== BUILD GRADLE ==========
      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Publish Gradle package
        run: ./gradlew publish --no-daemon
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # ========== BUILD DOCKER ==========
      - name: Set image name
        id: image
        run: |
          echo "name=$(echo 'ghcr.io/${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.image.outputs.name }}:latest
            ${{ steps.image.outputs.name }}:${{ steps.update_version.outputs.new_version }}
            ${{ steps.image.outputs.name }}:${{ github.sha }}

      # ========== NOTIFY PROVISIONER ==========
      - name: Notify provisioner
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository_owner }}/png-provisioner/dispatches \
            -d '{
              "event_type": "service_updated",
              "client_payload": {
                "service": "formatter-service",
                "version": "${{ steps.update_version.outputs.new_version }}",
                "sha": "${{ github.sha }}"
              }
            }'